name: Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get latest tag
        id: get_last_tag
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "last_tag=$last_tag" >> $GITHUB_ENV

      - name: Parse PR title for release type
        id: parse_release_type
        run: |
          # Extract "release(major|minor|patch)" from PR title
          release_type=$(echo "${{ github.event.pull_request.title }}" | grep -oP '(?<=release\()(major|minor|patch)(?=\))')
          echo "release_type=$release_type" >> $GITHUB_ENV

      - name: Check if release type was provided
        if: env.release_type == ''
        run: |
          echo "Error: PR title must include 'release(major|minor|patch)'."
          exit 1

      - name: Bump version
        id: bump_version
        run: |
          # Parse the last tag version (e.g., v1.2.3) into major, minor, patch
          version=${{ env.last_tag#v }}
          IFS='.' read -r major minor patch <<< "$version"

          # Increment version based on release type
          case "${{ env.release_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          # Format new version and export it
          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
